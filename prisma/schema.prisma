generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LanguageMode {
  eng
  shan
}
enum AchievementCategory {
  speed
  accuracy
  consistency
  practice
  certificate
}

enum LessonLevel {
  beginner
  intermediate
  advanced
  quotes
  music
}

model User {
  id              String         @id @default(cuid())
  email           String         @unique
  password        String
  bio             String?
  username        String        @unique
  joinedAt        DateTime       @default(now())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  typingTests     TypingTest[]
  leaderboard     Leaderboard[]
  achievements    UserAchievement[]
  refreshTokens   RefreshToken?
  otp            OTP?
  stats           Stats?
  certificate    Certificate?
}

model TypingTest {
  id              String    @id @default(cuid())
  userId          String
  wpm             Int
  accuracy        Int
  raw             Int
  consistency     Int
  timeTaken       Int      
  mode            LanguageMode  @default(eng) // "eng" or "shan"
  lessonLevel       String
  characters      Int       @default(0)
  correct_chars   Int       @default(0)
  createdAt       DateTime  @default(now())

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([mode])
  @@index([createdAt])
}

model Leaderboard {
  id              String    @id @default(cuid())
  userId          String    
  wpm             Int
  accuracy        Int
  raw             Int
  consistency     Int
  lessonLevel     LessonLevel
  mode            LanguageMode  @default(eng) // "eng" or "shan"
  tests_completed Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([wpm])
  @@index([mode])
  @@unique([userId, mode])
}

model Achievement {
  id              String    @id @default(cuid())
  name            String    @unique
  requirement     String
  threshold       Int
  category        AchievementCategory @default(speed)   // "speed", "accuracy", "consistency", "practice", "certificate"
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  users           UserAchievement[]
}

model UserAchievement {
  id              String    @id @default(cuid())
  userId          String
  achievementId   String
  unlockedAt      DateTime  @default(now())
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement     Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId])
  @@index([achievementId])
}

model Stats{
  id              String    @id @default(cuid())
  userId          String    @unique
  averageWpm      Int @default(0)
  bestWpm         Int @default(0)
  averageAccuracy Int @default(0)
  testsCompleted  Int @default(0)
  totalTimePracticed Int @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Certificate {
  id              String    @id @default(cuid())
  userId          String    @unique
  fullName        String
  isSubmitted     Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model RefreshToken {
  id              String    @id @default(cuid())
  userId          String    @unique
  token           String
  createdAt       DateTime  @default(now())
  expiredAt       DateTime
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  
}

model OTP {
  id              String    @id @default(cuid())
  userId          String    @unique
  otp             String
  createdAt       DateTime  @default(now())
  expiredAt       DateTime
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
